@startuml Class Diagram

interface IServiceManager {
    +AccountService: IAccountService
    +AuthenticationService: IAuthenticationService
    +MailService: IMailService
    +FileService: IFileService
    +NewsService: INewsService
    +NotificationService: INotificationService
    +ScheduleService: IScheduleService
    +TaskService: ITaskService
}

interface IAccountService {
    +ChangePasswordAsync(userId: string, oldPassword: string, newPassword: string): Task<bool>
}

class AccountService {
    -_repository: IRepositoryManager
    -_userManager: UserManager<TUser>
    +ChangePasswordAsync(userId: string, oldPassword: string, newPassword: string): Task<bool>
}

class UserManager<TUser> {
    -Store: IUserStore<TUser>
    -PasswordHasher: IPasswordHasher<TUser>
    +ChangePasswordAsync(user: TUser, currentPassword: string, newPassword: string): Task<IdentityResult>
    -GetPasswordStore(): IUserPasswordStore<TUser>
    -UpdatePasswordHash(passwordStore: IUserPasswordStore<TUser>, user: TUser, newPassword: string, validatePassword: bool): Task<IdentityResult>
}

interface IUserPasswordStore<TUser> {
    +SetPasswordHashAsync(user: TUser, passwordHash: string, cancellationToken: CancellationToken): Task
}

class ApiController {
    -_service: IServiceManager
    +ChangePassword(model: ChangePasswordRequestModel): Task<IActionResult>
}

class ValidationFilterAttribute {
}

interface IRepositoryManager {
    +account: IAccountRepository
}

IServiceManager <|.. ServiceManager
IAccountService <|.. AccountService

ApiController --> IServiceManager
ApiController ..> ValidationFilterAttribute

AccountService --> IRepositoryManager
AccountService --> UserManager

UserManager --> IUserPasswordStore

@enduml